step "approve-production-deployment" {
    condition = "Variable"
    name = "Approve Production Deployment"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{unless Octopus.Deployment.Trigger.Id}True#{/unless}"
    }

    action {
        action_type = "Octopus.Manual"
        environments = ["production"]
        is_required = true
        notes = "Require approval from someone with the appropriate permissions."
        properties = {
            Octopus.Action.Manual.BlockConcurrentDeployments = "True"
            Octopus.Action.Manual.Instructions = "Please add approval notes here."
        }
    }
}

step "create-web-app-service" {
    name = "Create Web App service (Azure discovery)"
    properties = {
        Octopus.Action.TargetRoles = "demo-k8s-cluster"
    }

    action "create-web-app-service-azure-discovery" {
        action_type = "Octopus.KubernetesDeployRawYaml"
        notes = <<-EOT
                Create a Load Balancer service for the web app on the target cluster.
                
                This step does cloud target discovery for AKS clusters.
                EOT
        properties = {
            Octopus.Action.KubernetesContainers.CustomResourceYaml = <<-EOT
                apiVersion: v1
                kind: Service
                metadata:
                  name: '#{OctoPetShop.WebApp.ServiceName}'
                  namespace: '#{OctoPetShop.Cluster.Namespace}'
                spec:
                  type: LoadBalancer
                  ports:
                    - name: http
                      port: 80
                      targetPort: #{OctoPetShop.WebApp.HttpPort}
                      protocol: TCP
                    - name: https
                      port: 443
                      targetPort: #{OctoPetShop.WebApp.HttpsPort}
                      protocol: TCP
                  selector:
                    component: web
                    type: main
                
                EOT
            Octopus.Action.KubernetesContainers.Namespace = "#{OctoPetShop.Cluster.Namespace}"
            Octopus.Action.Script.ScriptSource = "Inline"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = "OctoPetShop.WorkerPool.Azure"
    }
}

step "create-web-app-service-aws-discovery" {
    name = "Create Web App service (AWS discovery)"
    properties = {
        Octopus.Action.TargetRoles = "demo-k8s-cluster"
    }

    action {
        action_type = "Octopus.KubernetesDeployRawYaml"
        is_disabled = true
        notes = <<-EOT
                Create a Load Balancer service for the web app on the target cluster.
                
                This step does cloud target discovery for EKS clusters.
                EOT
        properties = {
            Octopus.Action.KubernetesContainers.CustomResourceYaml = <<-EOT
                apiVersion: v1
                kind: Service
                metadata:
                  name: '#{OctoPetShop.WebApp.ServiceName}'
                  namespace: '#{OctoPetShop.Cluster.Namespace}'
                spec:
                  type: LoadBalancer
                  ports:
                    - name: http
                      port: 80
                      targetPort: #{OctoPetShop.WebApp.HttpPort}
                      protocol: TCP
                    - name: https
                      port: 443
                      targetPort: #{OctoPetShop.WebApp.HttpsPort}
                      protocol: TCP
                  selector:
                    component: web
                    type: main
                
                EOT
            Octopus.Action.KubernetesContainers.Namespace = "#{OctoPetShop.Cluster.Namespace}"
            Octopus.Action.Script.ScriptSource = "Inline"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = "OctoPetShop.WorkerPool.AWS"
    }
}

step "deploy-web-app-containers" {
    name = "Deploy Web App containers"
    properties = {
        Octopus.Action.TargetRoles = "demo-k8s-cluster"
    }

    action {
        action_type = "Octopus.KubernetesDeployContainers"
        notes = "Deploy the web app containers to the target cluster."
        properties = {
            Octopus.Action.EnabledFeatures = ",Octopus.Features.KubernetesService,Octopus.Features.KubernetesIngress,Octopus.Features.KubernetesConfigMap,Octopus.Features.KubernetesSecret"
            Octopus.Action.KubernetesContainers.CombinedVolumes = "[]"
            Octopus.Action.KubernetesContainers.Containers = "[{\"IsNew\":true,\"InitContainer\":\"False\",\"Ports\":[],\"EnvironmentVariables\":[{\"key\":\"ASPNETCORE_URLS\",\"value\":\"http://+:#{OctoPetShop.WebApp.HttpPort}\"},{\"key\":\"ProductServiceBaseUrl\",\"value\":\"#{OctoPetShop.ProductApi.Url}\"},{\"key\":\"ShoppingCartServiceBaseUrl\",\"value\":\"#{OctoPetShop.ShoppingCartApi.Url}\"},{\"key\":\"AppVersion\",\"value\":\"#{Octopus.Release.Number}\"},{\"key\":\"EnvironmentName\",\"value\":\"#{Octopus.Environment.Name}\"},{\"key\":\"ASPNETCORE_ENVIRONMENT\",\"value\":\"#{Octopus.Environment.Name}\"}],\"SecretEnvironmentVariables\":[],\"SecretEnvFromSource\":[],\"ConfigMapEnvironmentVariables\":[],\"ConfigMapEnvFromSource\":[],\"FieldRefEnvironmentVariables\":[],\"VolumeMounts\":[],\"AcquisitionLocation\":\"NotAcquired\",\"Name\":\"web-app\",\"PackageId\":\"octopussamples/octopetshop-web\",\"FeedId\":\"Feeds-1483\",\"Properties\":{},\"Command\":[],\"Args\":[],\"Resources\":{\"requests\":{\"memory\":\"#{OctoPetShop.WebApp.Container.MemoryRequest}\",\"cpu\":\"\",\"ephemeralStorage\":\"\"},\"limits\":{\"memory\":\"#{OctoPetShop.WebApp.Container.MemoryLimit}\",\"cpu\":\"\",\"ephemeralStorage\":\"\",\"nvidiaGpu\":\"\",\"amdGpu\":\"\"}},\"LivenessProbe\":{\"failureThreshold\":\"\",\"initialDelaySeconds\":\"\",\"periodSeconds\":\"\",\"successThreshold\":\"\",\"timeoutSeconds\":\"\",\"type\":null,\"exec\":{\"command\":[]},\"httpGet\":{\"host\":\"\",\"path\":\"\",\"port\":\"\",\"scheme\":\"\",\"httpHeaders\":[]},\"tcpSocket\":{\"host\":\"\",\"port\":\"\"}},\"ReadinessProbe\":{\"failureThreshold\":\"\",\"initialDelaySeconds\":\"\",\"periodSeconds\":\"\",\"successThreshold\":\"\",\"timeoutSeconds\":\"\",\"type\":null,\"exec\":{\"command\":[]},\"httpGet\":{\"host\":\"\",\"path\":\"\",\"port\":\"\",\"scheme\":\"\",\"httpHeaders\":[]},\"tcpSocket\":{\"host\":\"\",\"port\":\"\"}},\"StartupProbe\":{\"failureThreshold\":\"\",\"initialDelaySeconds\":\"\",\"periodSeconds\":\"\",\"successThreshold\":\"\",\"timeoutSeconds\":\"\",\"type\":null,\"exec\":{\"command\":[]},\"httpGet\":{\"host\":\"\",\"path\":\"\",\"port\":\"\",\"scheme\":\"\",\"httpHeaders\":[]},\"tcpSocket\":{\"host\":\"\",\"port\":\"\"}},\"Lifecycle\":{},\"SecurityContext\":{\"allowPrivilegeEscalation\":\"\",\"privileged\":\"\",\"readOnlyRootFilesystem\":\"\",\"runAsGroup\":\"\",\"runAsNonRoot\":\"\",\"runAsUser\":\"\",\"capabilities\":{\"add\":[],\"drop\":[]},\"seLinuxOptions\":{\"level\":\"\",\"role\":\"\",\"type\":\"\",\"user\":\"\"}}}]"
            Octopus.Action.KubernetesContainers.DeploymentAnnotations = "[{\"key\":\"kubernetes.io/change-cause\",\"value\":\"#{Octopus.Release.Number}\"}]"
            Octopus.Action.KubernetesContainers.DeploymentLabels = "{\"component\":\"web\",\"type\":\"main\"}"
            Octopus.Action.KubernetesContainers.DeploymentName = "#{OctoPetShop.WebApp.ServiceName}"
            Octopus.Action.KubernetesContainers.DeploymentResourceType = "Deployment"
            Octopus.Action.KubernetesContainers.DeploymentStyle = "RollingUpdate"
            Octopus.Action.KubernetesContainers.DeploymentWait = "Wait"
            Octopus.Action.KubernetesContainers.DnsConfigOptions = "[]"
            Octopus.Action.KubernetesContainers.IngressAnnotations = "[]"
            Octopus.Action.KubernetesContainers.LoadBalancerAnnotations = "[]"
            Octopus.Action.KubernetesContainers.Namespace = "#{OctoPetShop.Cluster.Namespace}"
            Octopus.Action.KubernetesContainers.NodeAffinity = "[]"
            Octopus.Action.KubernetesContainers.PersistentVolumeClaims = "[]"
            Octopus.Action.KubernetesContainers.PodAffinity = "[]"
            Octopus.Action.KubernetesContainers.PodAnnotations = "[]"
            Octopus.Action.KubernetesContainers.PodAntiAffinity = "[]"
            Octopus.Action.KubernetesContainers.PodManagementPolicy = "OrderedReady"
            Octopus.Action.KubernetesContainers.PodSecuritySysctls = "[]"
            Octopus.Action.KubernetesContainers.Replicas = "1"
            Octopus.Action.KubernetesContainers.SecretName = "octopetshop-shoppingcart-secrets"
            Octopus.Action.KubernetesContainers.SecretValues = "{\"ops-connectionstring\":\"#{OctoPetShop.Database.ConnectionString}\"}"
            Octopus.Action.KubernetesContainers.ServiceNameType = "External"
            Octopus.Action.KubernetesContainers.ServicePorts = "[]"
            Octopus.Action.KubernetesContainers.ServiceType = "ClusterIP"
            Octopus.Action.KubernetesContainers.Tolerations = "[]"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = "OctoPetShop.WorkerPool.Azure"

        packages "web-app" {
            acquisition_location = "NotAcquired"
            feed = "docker-hub"
            package_id = "octopussamples/octopetshop-web"
            properties = {
                Extract = "False"
                PackageParameterName = ""
                SelectionMode = "immediate"
            }
        }
    }
}

step "send-completion-notification" {
    condition = "Variable"
    name = "Send Completion Notification"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{unless Octopus.Deployment.Trigger.Id}True#{/unless}"
    }

    action {
        action_type = "Octopus.Email"
        environments = ["production"]
        is_disabled = true
        notes = "Email the deployer that the deployment has been completed."
        properties = {
            Octopus.Action.Email.Body = "#{Octopus.Release.Notes}"
            Octopus.Action.Email.IsHtml = "True"
            Octopus.Action.Email.Subject = "Release #{Octopus.Release.Number} has been deployed to #{Octopus.Environment.Name}"
            Octopus.Action.Email.To = "#{Octopus.Deployment.CreatedBy.EmailAddress}"
        }
    }
}